version: "3.8"

services:
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    env_file: .env
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc 127.0.0.1 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    container_name: postgres
    image: postgres:15
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5


  db-migrate:
    container_name: db-migrate
    image: flyway/flyway:9
    depends_on:
      - postgres
    env_file: .env
    command: >
      -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      -user=${POSTGRES_USER}
      -password=${POSTGRES_PASSWORD}
      migrate
    volumes:
      - ./db:/flyway/sql


  clickhouse:
    container_name: clickhouse
    image: yandex/clickhouse-server:latest
    env_file: .env
    ports:
      - "8123:8123"  
      - "9002:9000" 
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/ddl.sql:/docker-entrypoint-initdb.d/01-ddl.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "clickhouse-client --host localhost --port 9000 --user default --query=\"SELECT 1\" > /dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 5


  minio:
    container_name: minio
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    env_file: .env
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 5s
      retries: 5
    volumes:
      - minio_data:/data

  minio-init:
    container_name: minio-init
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    env_file: .env
    entrypoint:
      - sh
      - -c
      - |
        mc alias set myminio http://minio:9000 "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"
        mc mb --ignore-existing myminio/"${MINIO_BUCKET}"

  spark-master:
    container_name: spark-master
    image: bitnami/spark:3.3.1
    environment:
      SPARK_MODE: master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark_logs:/opt/bitnami/spark/logs
   


  spark-worker:
    container_name: spark-worker
    image: bitnami/spark:3.3.1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    ports:
      - "8081:8081"
    volumes:
      - spark_logs:/opt/bitnami/spark/logs

  api:
    container_name: api
    build:
      context: .
      dockerfile: ./api/Dockerfile
    env_file: .env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - kafka
      - clickhouse
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka-init:
    container_name: kafka-init
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - kafka
    env_file: .env
    volumes:
      - ./ingestion/scripts/create_topics.sh:/scripts/create_topics.sh:ro
    entrypoint: ["bash", "/scripts/create_topics.sh"]
    restart: "no"

  postgres-csv-loader:
    container_name: postgres-csv-loader
    build:
      context: .
      dockerfile: ./ingestion/scripts/loader/Dockerfile
    env_file: .env
    volumes:
      - ./ingestion/raw_data:/app/raw_data:ro
    depends_on:
      postgres:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
    entrypoint: ["python", "load_raw_to_pg.py"]
    restart: "no"


  spark-batch:
    container_name: spark-batch
    build:
      context: .
      dockerfile: ingestion/Dockerfile
    env_file: .env
    environment:
      - HADOOP_USER_NAME=spark
    user: root
    depends_on:
      - spark-master
      - spark-worker
      - postgres
      - minio
      - kafka-init
      - minio-init
      - postgres-csv-loader
    restart: "no"       


  spark-stream:
    container_name: spark-stream
    build:
      context: .
      dockerfile: ./streaming/Dockerfile
    env_file: .env
    environment:
      - HADOOP_USER_NAME=spark
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
      - CLICKHOUSE_DB=purchase_analysis
    depends_on:
      - spark-master
      - spark-worker
      - kafka
      - clickhouse
    volumes:
      - ./streaming/src:/app/src
    
    healthcheck:
      test: ["CMD-SHELL", "echo 'SELECT 1' | clickhouse-client --host clickhouse --port 9002 --database ${CLICKHOUSE_DB} > /dev/null 2>&1"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: "no"

  spark_stage_to_postgres:
    image: bitnami/spark:3.3.1
    container_name: spark_stage_to_postgres
    user: root                          
    depends_on:
      - postgres
      - clickhouse
      - minio

    environment:
      HOME: /root                       
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}

      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    volumes:
      - ./ingestion/src:/opt/spark-apps
      - ./ingestion/config:/opt/spark-config
      - ./drivers:/opt/jars

    entrypoint: [
      "bash", "-c",                                                 
      "/opt/bitnami/spark/bin/spark-submit --master local[2] --jars /opt/jars/postgresql-42.6.0.jar,/opt/jars/iceberg-spark3-runtime-0.13.2.jar,/opt/jars/clickhouse-jdbc-0.4.6.jar --conf spark.hadoop.fs.s3a.endpoint=$MINIO_ENDPOINT --conf spark.hadoop.fs.s3a.access.key=$MINIO_ROOT_USER --conf spark.hadoop.fs.s3a.secret.key=$MINIO_ROOT_PASSWORD --conf spark.sql.catalog.iceberg_catalog.type=hadoop --conf spark.sql.catalog.iceberg_catalog.warehouse=s3a://$MINIO_BUCKET/iceberg_warehouse /opt/spark-apps/stage_to_postgres.py"

    ]
    restart: always




  spark_reports:
    image: bitnami/spark:3.3.1
    container_name: spark_reports
    user: root
    depends_on:
      - postgres
      - clickhouse
    restart: unless-stopped

    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}

    volumes:
      - ./ingestion/src:/opt/spark-apps
      - ./drivers:/opt/jars

    entrypoint: [
      "bash", "-c",
      "export jars_csv=/opt/jars/postgresql-42.6.0.jar,/opt/jars/clickhouse-jdbc-0.4.6.jar && \
       /opt/bitnami/spark/bin/spark-submit \
         --master local[2] \
         --jars /opt/jars/postgresql-42.6.0.jar,/opt/jars/clickhouse-jdbc-0.4.6.jar \
         /opt/spark-apps/reports_snowflake_to_clickhouse.py"
    ]




  streamlit:
    container_name: streamlit
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "8501:8501"
    depends_on:
      - clickhouse
    environment:
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - CLICKHOUSE_DB=purchase_analysis
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=
    restart: "no"

volumes:
  pgdata:
  clickhouse_data:
  minio_data:
  spark_logs:
