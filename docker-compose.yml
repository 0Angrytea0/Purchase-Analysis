version: "3.8"

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:15
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-migrate:
    image: flyway/flyway:9
    depends_on:
      - postgres
    env_file: .env
    command: >
      -url=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      -user=${POSTGRES_USER}
      -password=${POSTGRES_PASSWORD}
      migrate
    volumes:
      - ./db:/flyway/sql

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    ports:
      - "8123:8123"
      - "9002:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    env_file: .env
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
      interval: 5s
      retries: 5
    volumes:
      - minio_data:/data

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    env_file: .env
    entrypoint:
      - sh
      - -c
      - |
        mc alias set myminio http://minio:9000 "${MINIO_ROOT_USER}" "${MINIO_ROOT_PASSWORD}"
        mc mb --ignore-existing myminio/"${MINIO_BUCKET}"

  spark-master:
    image: bitnami/spark:3.3.1
    environment:
      SPARK_MODE: master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark_logs:/opt/bitnami/spark/logs

  spark-worker:
    image: bitnami/spark:3.3.1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    ports:
      - "8081:8081"
    volumes:
      - spark_logs:/opt/bitnami/spark/logs

  api:
    build: ./api
    env_file: .env
    volumes:
      - ./api/src:/app/src
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - kafka
      - clickhouse
      - minio

  kafka-init:
    image: confluentinc/cp-kafka:7.2.1
    depends_on:
      - kafka
    env_file: .env
    volumes:
      - ./ingestion/scripts/create_topics.sh:/scripts/create_topics.sh:ro
    entrypoint: ["bash", "/scripts/create_topics.sh"]
    restart: "no"

  # 1) Сначала прогоняем loader, он читает CSV и кладёт в Postgres → вылетает
  postgres-csv-loader:
    build:
      context: ./ingestion/scripts/loader
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - ./ingestion/raw_data:/app/raw_data:ro
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["python", "load_raw_to_pg.py"]
    restart: "no"

  # 2) Только после успешного loader запускаем Spark‐batch
  spark-batch:
    build:
      context: .
      dockerfile: ingestion/Dockerfile
    env_file: .env
    environment:
      - HADOOP_USER_NAME=spark
    user: root
    depends_on:
      - spark-master
      - spark-worker
      - postgres
      - minio
      - kafka-init
      - minio-init
      - postgres-csv-loader
    restart: "no"

  spark-stream:
    build:
      context: .
      dockerfile: streaming/Dockerfile
    env_file: .env
    depends_on:
      - spark-master
      - spark-worker
      - kafka
      - minio
      - clickhouse

volumes:
  pgdata:
  clickhouse_data:
  minio_data:
  spark_logs:
